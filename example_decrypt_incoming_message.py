import base64
import json

from utils.cryptography import *

"""
 In browser console exec:
     JSON.parse(window.localStorage.getItem('WASecretBundle'))

 and put here:
"""
mac_key = "LlOtQLOe0AOX3Nvp/3mPIkfHQuB0kEbKsNWYm9l9ppU="
enc_key = "bgChqDs7oAGVehrqcUCyVb3rP5H8xcY2T5FQgZTHoDs="

"""
 Copy (INCOMING) message as BASE64 and put here:
"""
mess = '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'

mess = base64.b64decode(mess)
mac_key = base64.b64decode(mac_key)
enc_key = base64.b64decode(enc_key)

message_parts = mess.split(',', 1)
mess_tag = message_parts[0]
mess_cont = message_parts[1]

print('tag', mess_tag)

mess_cont = decrypt_node(mess_cont, mac_key, enc_key)

print('mess_cont', json.dumps(mess_cont))
